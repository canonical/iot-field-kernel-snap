name: visionfive2-kernel
adopt-info: kernel
type: kernel
build-base: core24
summary: A StarFive VisionFive 2 board kernel for use with Ubuntu Core 24
description: |
  This snap provides the kernel, modules, firmware, and initrd required to
  create an Ubuntu Core image for the StarFive VisionFive 2.

  The kernel and initrd are provided as a single universal kernel image file
  which is then booted by the managed assets created and owned by snapd.
  Generally, this snap would also provide the device tree files for the target
  hardware. However, in this case, that device tree is provided by the u-boot
  binary in our gadget snap. If we needed it here, we could likewise add that
  file to our UKI.

  ** Note that the license information for this snap is incomplete **
  Do your due diligence to ensure compliance with the licenses of the contents of this snap.

  This snapcraft.yaml is licensed under CC-BY-SA-4.0

  You can find any and all licenses for the contents of this snap at the following locations:

  kernel:         https://git.launchpad.net/~canonical-kernel/ubuntu/+source/linux-riscv/+git/noble/tree/?h=allwinner-next
  linux-firmware: https://git.launchpad.net/ubuntu/+source/linux-firmware/tree/?h=applied/ubuntu/noble

  Additional licenses can also be found within this snap in the licenses/ top-level directory.

license: "GPL-2.0 AND GPL-3.0 AND CC-BY-SA-4.0"
website: https://github.com/canonical/iot-field-kernel-snap
issues: https://github.com/canonical/iot-field-kernel-snap/issues
source-code: https://github.com/canonical/iot-field-kernel-snap/tree/24-riscv64-visionfive2

grade: devel
confinement: strict

platforms:
  riscv64:
    build-on:  [amd64, riscv64]
    build-for: [riscv64]

package-repositories:
  - type: apt
    components: [main, universe]
    architectures: [riscv64]
    suites: [noble, noble-security, noble-updates]
    key-id: F6ECB3762474EDA9D21B7022871920D1991BC93C
    url: http://ports.ubuntu.com/ubuntu-ports

parts:
  # This can serve as an example for building the kernel from source
  kernel:
    plugin: kernel
    source: https://git.launchpad.net/~canonical-kernel/ubuntu/+source/linux-riscv/+git/noble
    source-type: git
    source-depth: 1
    source-branch: master
    kernel-image-target:
      riscv64: Image
    kernel-kconfigs:
      - CONFIG_SYSTEM_TRUSTED_KEYS=""
      - CONFIG_SYSTEM_REVOCATION_KEYS=""
    build-packages:
      - on amd64 to riscv64:
        - gcc-${CRAFT_ARCH_TRIPLET_BUILD_FOR}
    override-build: |
      craftctl default

      kver="$(basename "${CRAFT_PART_INSTALL}/lib/modules/"*)"

      # Set the version of the snap to match the kernel version.
      craftctl set version="${kver}"
    stage:
      - dtbs/starfive/
      - lib/firmware
      - lib/modules
      - modules/
      - kernel.img
    prime:
      - dtbs/starfive
      - lib/firmware
      - lib/modules
      - modules/

  # It's possible that this part could be consolidated into the kernel part
  firmware:
    after: [kernel]
    plugin: nil
    stage-packages:
      - linux-firmware:${CRAFT_ARCH_BUILD_FOR}
      - wireless-regdb:all
    organize:
      lib/firmware: firmware/
      usr/share/doc/linux-firmware/licenses: licenses/
    stage:
      - firmware/
      - licenses/
    prime:
      - firmware/
      - licenses/
      # Remove some firmware blobs to save a ton of space
      - -firmware/amdgpu
      - -firmware/brcm
      - -firmware/i915
      - -firmware/intel
      - -firmware/iwlwifi*
      - -firmware/liquidio
      - -firmware/mellanox
      - -firmware/mrvl
      - -firmware/netronome
      - -firmware/nvidia
      - -firmware/qcom
      - -firmware/qed

  # Make sure some important modules are in the initrd so the rootfs can be
  # mounted. Note that these could be optionally builtin to the kernel directly
  # as it is being build from source!
  initrd:
    after: [firmware, kernel]
    plugin: initrd
    initrd-build-efi-image: true
    build-snaps: [core24/latest/stable]
    initrd-configured-modules: [nls_iso8859-1, dw_mmc-starfive, dwmac_starfive]
