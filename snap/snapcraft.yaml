name: nezha-kernel
type: kernel
build-base: core24
adopt-info: kernel
summary: An Ubuntu Core kernel for the RISC-V AllWinner Nezha
description: |
  This snap provides the kernel, modules, firmware, and initrd required to
  create an Ubuntu Core image for the RISC-V AllWinner Nezha.

  The kernel and initrd are provided as a single universal kernel image file
  which is then booted by the managed assets created and owned by snapd.
  Generally, this snap would also provide the device tree files for the target
  hardware. However, in this case, that device tree is provided by the u-boot
  binary in our gadget snap. If we needed it here, we could likewise add that
  file to our UKI.

  ** Note that the license information for this snap is incomplete **
  Do your due diligence to ensure compliance with the licenses of the contents of this snap.

  This snapcraft.yaml is licensed under CC-BY-SA-4.0

  You can find any and all licenses for the contents of this snap at the following locations:

  rtl8723ds:      https://github.com/lwfinger/rtl8723ds
  linux-firmware: https://git.launchpad.net/ubuntu/+source/linux-firmware/tree/?h=applied/ubuntu/noble
  kernel:         https://git.launchpad.net/~canonical-kernel/ubuntu/+source/linux-riscv/+git/noble/tree/?h=allwinner-next

  All provided: licenses/

grade: stable
confinement: strict

license: "GPL-2.0 AND GPL-3.0 AND CC-BY-SA-4.0"
website: https://github.com/canonical/iot-field-kernel-snap
issues: https://github.com/canonical/iot-field-kernel-snap/issues

# We cannot cross-build the kernel snap at this time. To do so, we would have to
# hand-craft an initrd. While not impossible, it is a little too demanding for
# our purposes at this time.
platforms:
  riscv64:
    build-on:  [amd64, riscv64]
    build-for: [riscv64]

parts:
  # Provide the kernel.
  # Trimming any modules we know a priori to not be needed by the target device
  # can marginally reduce kernel snap size.
  kernel:
    plugin: nil
    source: https://git.launchpad.net/canonical-kernel-snaps
    source-depth: 1
    source-type: git
    stage-packages:
      - linux-allwinner:${CRAFT_ARCH_BUILD_FOR}
      - linux-firmware:${CRAFT_ARCH_BUILD_FOR}
      - wireless-regdb
    override-build: |
      craftctl default

      kver="$(basename "${CRAFT_PART_INSTALL}/lib/modules/"*)"

      # Set the version of the snap to match the kernel version.
      craftctl set version="$kver"

      # Create the module information tree.
      depmod -a -b "${CRAFT_PART_INSTALL}" "$kver"

      [ ! -d "${CRAFT_PART_INSTALL}/lib/modules" ] || {
        mv -f "${CRAFT_PART_INSTALL}/lib/modules" "${CRAFT_PART_INSTALL}"
      }
      [ ! -d "${CRAFT_PART_INSTALL}/lib/firmware" ] || {
        mv -f "${CRAFT_PART_INSTALL}/lib/firmware" "${CRAFT_PART_INSTALL}"
      }

      mv -f "${CRAFT_PART_INSTALL}/boot/"* "${CRAFT_PART_INSTALL}"

      # Ubuntu Core expects modules/ to be a top-level directory in the snap,
      # but we must also maintain compatibility with things which expect it to
      # be in lib/modules/
      ln -sf ../modules  "${CRAFT_PART_INSTALL}/lib/modules"
      ln -sf ../firmware "${CRAFT_PART_INSTALL}/lib/firmware"

      "${CRAFT_PART_SRC}/trim-firmware" "${CRAFT_PART_INSTALL}"

      install -Dm644 "${CRAFT_PART_BUILD}/LICENSE" "${CRAFT_PART_INSTALL}/LICENSE"
    organize:
      LICENSE: licenses/kernel.license
      usr/share/doc/linux-firmware/licenses/*: licenses/
      vmlinuz-*: kernel.img
    stage:
      - config-*
      - firmware/
      - kernel.img
      - lib/firmware
      - lib/modules
      - modules/
      - System.map*
    prime:
      - -kernel.img

  # NOTE: WiFi is currently broken on the Nezha board.
  # WiFi works fine on the Sipeed Lichee RV.
  wlan-driver:
    after: [kernel]
    plugin: nil
    # source: https://git.launchpad.net/ubuntu/+source/licheerv-rtl8723ds-dkms
    source: https://github.com/lwfinger/rtl8723ds
    source-type: git
    source-depth: 1
    source-branch: master
    # source-branch: applied/ubuntu/noble-devel
    build-environment:
      - on amd64 to riscv64:
        - ARCH: riscv
        - CC: ${CRAFT_ARCH_TRIPLET_BUILD_FOR}-gcc-12
        - CROSS_COMPILE: ${CRAFT_ARCH_TRIPLET_BUILD_FOR}-
    build-packages:
      - make
      - bc
      - on amd64 to riscv64:
        - gcc-${CRAFT_ARCH_TRIPLET_BUILD_FOR}
        - binutils-${CRAFT_ARCH_TRIPLET_BUILD_FOR}
        - libc6-dev-${CRAFT_ARCH_BUILD_FOR}-cross
      - on riscv64:
        - gcc
    override-build: |
      export kver="$(basename ${CRAFT_STAGE}/modules/* | cut -f1 -d/)"
      make KSRC="${CRAFT_PART_BUILD}/../../kernel/install/usr/src/linux-headers-${kver}" modules

      install -Dm0644 ${CRAFT_PART_BUILD}/8723ds.ko \
        -t ${CRAFT_STAGE}/modules/${kver}/net/wireless/

      install -Dm644 "${CRAFT_PART_SRC}/COPYING" \
        "${CRAFT_PART_INSTALL}/"
    organize:
      LICENSE: licenses/rtl8723ds.license

  # Provide the initrd for Ubuntu Core.
  # The initrd includes important things such as snap-bootstrap which
  # orchestrates the entire Ubuntu Core installation process. The documentation
  # for this tool can be found here:
  # https://github.com/snapcore/snapd/blob/master/cmd/snap-bootstrap/README.md
  initrd:
    plugin: initrd
    after: [kernel, wlan-driver]
    initrd-build-efi-image: true
    initrd-configured-modules: [8723ds, nls_iso8859-1, sunxi-mmc]
    build-snaps: [core24/latest/stable]
