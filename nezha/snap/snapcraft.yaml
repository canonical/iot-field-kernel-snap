name: nezha-kernel
adopt-info: kernel
type: kernel
build-base: core22
summary: An Ubuntu Core kernel for the RISC-V AllWinner Nezha
description: |
  This snap provides the kernel, modules, firmware, and initrd required to
  create an Ubuntu Core image for the RISC-V AllWinner Nezha.

  The kernel and initrd are provided as a singular FIT image file.
  This FIT image includes several other device trees to accomodate the Sipeed Lichee RV and its various additional peripherals.

  ** Note that the license information for this snap is incomplete **
  Do your due diligence to ensure compliance with the licenses of the contents of this snap.

  This snapcraft.yaml and the kernel_riscv64.its file are licensed under CC-BY-SA-4.0

  You can find any and all licenses for the contents of this snap at the following locations:

  kernel:             https://git.launchpad.net/~canonical-kernel/ubuntu/+source/linux-riscv/+git/noble/tree/?h=allwinner-next
  linux-firmware:     https://git.launchpad.net/ubuntu/+source/linux-firmware/tree/?h=applied/ubuntu/noble
  rtl8723ds:          https://git.launchpad.net/ubuntu/+source/licheerv-rtl8723ds-dkms/tree/
  rtl8723ds upstream: https://github.com/lwfinger/rtl8723ds

  Additional licenses can also be found within this snap in the licenses/ top-level directory.

grade: stable
confinement: strict

license: "GPL-2.0 AND GPL-3.0 AND CC-BY-SA-4.0"
issues: https://github.com/canonical/iot-field-kernel-snap/issues
website: https://github.com/canonical/iot-field-kernel-snap/tree/22-riscv64-nezha

architectures:
  - build-on:  [amd64, riscv64]
    build-for: [riscv64]

package-repositories:
  - type: apt
    suites: [jammy]
    components: [main]
    architectures: [riscv64]
    key-id: 78E1918602959B9C59103100F1831DDAFC42E99D
    url: http://ppa.launchpad.net/snappy-dev/image/ubuntu

parts:
  kernel:
    after: [firmware]
    plugin: kernel
    source:
      - to riscv64: https://git.launchpad.net/~canonical-kernel/ubuntu/+source/linux-riscv/+git/jammy
    source-type: git
    source-depth: 1
    source-branch: allwinner-5.19-next
    kernel-kconfigflavour: "allwinner"
    kernel-with-firmware: false
    kernel-compiler: ${CRAFT_ARCH_TRIPLET_BUILD_FOR}-gcc
    kernel-image-target:
      riscv64: Image
    kernel-initrd-compression: gz
    kernel-initrd-stage-firmware: true
    kernel-device-trees:
      - allwinner/sun20i-d1-nezha
      - allwinner/sun20i-d1-lichee-rv
      - allwinner/sun20i-d1-lichee-rv-dock
      - allwinner/sun20i-d1-lichee-rv-86-panel-480p
      - allwinner/sun20i-d1-lichee-rv-86-panel-720p
    kernel-kconfigs:
      - CONFIG_DRM_AMDGPU=n
      - CONFIG_DRM_ARCPGU=n
      - CONFIG_DRM_BOCHS=n
      - CONFIG_DRM_CIRRUS_QEMU=n
      - CONFIG_DRM_GM12U320=n
      - CONFIG_DRM_MGAG200=n
      - CONFIG_DRM_MXSFB=n
      - CONFIG_DRM_NOUVEAU=n
      - CONFIG_DRM_QXL=n
      - CONFIG_DRM_RADEON=n
      - CONFIG_DRM_VIRTIO_GPU=n
      - CONFIG_DRM_VKMS=n
    kernel-initrd-modules:
      - nls_iso8859-1
      - 8723ds
    build-packages:
      - to riscv64:
        - bison
        - debhelper
        - flex
        - libssl-dev
        - gcc-${CRAFT_ARCH_TRIPLET_BUILD_FOR}
    stage-packages:
      - on riscv64:
        - linux-image-allwinner:${CRAFT_ARCH_BUILD_FOR}
        - linux-headers-allwinner:${CRAFT_ARCH_BUILD_FOR}
    override-pull: |
      [ "$(gcc -dumpmachine)" = "riscv64-linux-gnu" ] || {
        # Fetch our sources and setup our environment
        craftctl default

        . debian/debian.env

        deb_ver=$(dpkg-parsechangelog -l ${DEBIAN}/changelog -S version)
        craftctl set version=local-${deb_ver}

        fakeroot debian/rules clean

        # Kernel plugin will error if this file does not exist
        touch ${DEBIAN}/config/config.common.ports
      }
    override-build: |
      [ "$(gcc -dumpmachine)" = "riscv64-linux-gnu" ] || {
        craftctl default
      }

      ! [ "$(gcc -dumpmachine)" = "riscv64-linux-gnu" ] || {
        # TODO: default behavior when native building
        cp -arf lib/firmware/*/device-tree/allwinner ${CRAFT_PART_INSTALL}/dtbs
        cp -af  boot/vmlinuz*                        ${CRAFT_PART_INSTALL}/vmlinuz
        cp -af  lib/modules                          ${CRAFT_PART_INSTALL}/modules
      }
    organize:
      kernel.img: vmlinuz
    stage:
      - dtbs
      - modules
      - vmlinuz
      - initrd.img
    prime:
      - -*

  firmware:
    plugin: dump
    source: https://git.launchpad.net/~canonical-kernel-snaps/+git/kernel-snaps-uc22
    source-type: git
    source-depth: 1
    source-branch: main
    stage-packages:
      - linux-firmware:${CRAFT_ARCH_BUILD_FOR}
      - wireless-regdb:all
    override-build: |
      craftctl default
      ln -sf rtl8723d_config.bin \
        ${CRAFT_PART_INSTALL}/lib/firmware/rtl_bt/rtl8723ds_config.bin
      ln -sf rtl8723d_fw.bin \
        ${CRAFT_PART_INSTALL}/lib/firmware/rtl_bt/rtl8723ds_fw.bin
    organize:
      lib/firmware: firmware/
    stage:
      - firmware/
      - trim-firmware
    prime:
      - -*

  # NOTE: WiFi is currently broken on the Nezha board.
  # WiFi works fine on the Sipeed Lichee RV.
  wlan-driver:
    after: [kernel]
    plugin: nil
    source:
      - to riscv64: "https://github.com/lwfinger/rtl8723ds.git"
      - on riscv64: "https://git.launchpad.net/ubuntu/+source/licheerv-rtl8723ds-dkms"
    source-type: git
    source-depth: 1
    build-environment:
      - MAKEFLAGS: -j${CRAFT_PARALLEL_BUILD_COUNT}
      - to riscv64:
        - ARCH: riscv
        - CC: ${CRAFT_ARCH_TRIPLET_BUILD_FOR}-gcc-12
        - CROSS_COMPILE: ${CRAFT_ARCH_TRIPLET_BUILD_FOR}-
    build-packages:
      - make
      - bc
      - to riscv64:
        - gcc-12-${CRAFT_ARCH_TRIPLET_BUILD_FOR}
        - binutils-${CRAFT_ARCH_TRIPLET_BUILD_FOR}
        - libc6-dev-${CRAFT_ARCH_BUILD_FOR}-cross
      - on riscv64:
        - gcc-12
    override-pull: |
      craftctl default

      ! [ "$(gcc -dumpmachine)" = "riscv64-linux-gnu" ] || {
        git checkout applied/ubuntu/jammy-updates
      }

    override-build: |
      [ "$(gcc -dumpmachine)" = "riscv64-linux-gnu" ] || {
        export KVER="$(basename ${CRAFT_STAGE}/modules/* | cut -f1 -d/)"
        make KSRC=../../kernel/build modules
      }

      ! [ "$(gcc -dumpmachine)" = "riscv64-linux-gnu" ] || {
        export KVER="$(basename ${CRAFT_STAGE}/modules/*-allwinner | cut -f1 -d/)"
        make KSRC=${CRAFT_STAGE}/usr/src/linux-headers-${KVER} modules
      }

        install -Dm0644 ${CRAFT_PART_BUILD}/8723ds.ko \
          -t ${CRAFT_PART_INSTALL}/modules/${KVER}/dkms/
    prime:
      - modules
      - -modules/*/dkms/8723ds.ko

  depmod:
    plugin: nil
    after: [kernel, wlan-driver]
    build-packages:
      - kmod
    override-prime: |
      [ "$(gcc -dumpmachine)" = "riscv64-linux-gnu" ] || {
        # Collect all kernel and separately built modules
        KVER="$(basename ${CRAFT_STAGE}/modules/* | cut -f1 -d/)"
        craftctl default

        mkdir -p   lib
        cp -arf ${CRAFT_STAGE}/modules  ./
        cp -arf ${CRAFT_STAGE}/firmware ./

        ln -sf  ../modules lib/modules

        depmod -b   . ${KVER}

        ${CRAFT_STAGE}/trim-firmware ${CRAFT_PRIME}
      }

      ! [ "$(gcc -dumpmachine)" = "riscv64-linux-gnu" ] || {
        KVER="$(basename ${CRAFT_STAGE}/modules/*-allwinner | cut -f1 -d/)"
        craftctl default
        depmod -b . ${KVER}

        cp -arf ${CRAFT_STAGE}/firmware ./
        ${CRAFT_STAGE}/trim-firmware ${CRAFT_PRIME}
      }

  fit-image:
    after: [kernel]
    plugin: dump
    source: fit-image/
    build-packages:
      - device-tree-compiler
      - u-boot-tools
    override-stage: |
      craftctl default

      mkimage \
          -f kernel_${CRAFT_ARCH_BUILD_FOR}.its \
          ${CRAFT_PRIME}/kernel.img
    prime:
      - -kernel_${CRAFT_ARCH_BUILD_FOR}.its
