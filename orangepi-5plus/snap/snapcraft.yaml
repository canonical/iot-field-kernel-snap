---
# SPDX-License-Identifier: GPL-2.0
# Copyright (C) 2023 Isaac True

name: orange-pi-5plus-kernel
summary: A kernel for the Orange Pi 5+ for use with Ubuntu Core 22
description: |
  A kernel for the Orange Pi 5+ for use with Ubuntu Core 22

adopt-info: kernel
build-base: core22
confinement: strict
type: kernel

architectures:
  - build-on: arm64
    build-for: arm64

package-repositories:
  - type: apt
    url: http://ppa.launchpad.net/snappy-dev/image/ubuntu
    architectures: ["${CRAFT_TARGET_ARCH}",]
    key-server: keyserver.ubuntu.com
    key-id: 78E1918602959B9C59103100F1831DDAFC42E99D
    formats: [deb,]
    components: [main,]
    suites: [jammy,]
  - type: apt
    url: https://ppa.launchpadcontent.net/itrue/orangepi/ubuntu
    architectures: ["${CRAFT_TARGET_ARCH}",]
    key-server: keyserver.ubuntu.com
    key-id: FDC51455B3F8767957F2AA1E831081403F1C01F6
    formats: [deb,]
    components: [main,]
    suites: [mantic,]

parts:
  kernel:
    plugin: nil
    build-packages:
      - kmod
    stage-packages:
      - linux-rockchip:${CRAFT_TARGET_ARCH}
    override-build: |
      craftctl default
      craftctl set version="$(apt-cache show linux-rockchip:${CRAFT_TARGET_ARCH} | grep '^Version:' | cut -f2 -d\ )"
      craftctl set grade="devel"
      depmod -v -a -b "${CRAFT_PART_INSTALL}" "$(basename ${CRAFT_PART_INSTALL}/lib/modules/*)"
    organize:
      "boot/vmlinuz-*": Image
      "lib/modules": modules
      "lib/firmware/*/device-tree": dtbs
    stage:
      - Image
      - dtbs
      - modules
    prime:
      - modules

  firmware:
    plugin: nil
    source: https://github.com/orangepi-xunlong/firmware.git
    source-type: git
    source-depth: 1
    stage-packages:
      - linux-firmware
    override-build: |
      craftctl default
      # Overwrite any firmware files from OPi with the ones from linux-firmware
      # Need to do this here rather than in organize because it doesn't like
      # merging paths
      mkdir -p "${CRAFT_PART_INSTALL}/firmware"
      cp -r "${CRAFT_PART_SRC}/"* "${CRAFT_PART_INSTALL}/firmware"
      cp -r "${CRAFT_PART_INSTALL}/lib/firmware/"* \
        "${CRAFT_PART_INSTALL}/firmware/"
      rm -rf "${CRAFT_PART_INSTALL}/firmware/lib"
    stage:
      - firmware
    prime:
      - firmware

  # In order to support cross-compilation, we need to do a few tricks with
  # downloading the initramfs package for the target arch
  ubuntu-core-initramfs:
    plugin: nil
    override-pull: |
      apt-get download ubuntu-core-initramfs:${CRAFT_TARGET_ARCH}
    override-build: |
      dpkg -x ubuntu-core-initramfs*_${CRAFT_TARGET_ARCH}.deb \
        ${CRAFT_PART_INSTALL}

      # Extra initrd modules
      for mod in \
          dw_mmc-rockchip \
          sdhci-of-dwcmshc \
          gpio-rockchip \
          spi-rockchip \
          rk8xx-spi \
          rk805-pwrkey \
          rk808-regulator \
          pinctrl-rk805 \
          fixed \
          pl330 \
          phy-rockchip-naneng-combphy \
          r8169 \
        ; do
        echo ${mod} >> \
          ${CRAFT_PART_INSTALL}/usr/lib/ubuntu-core-initramfs/modules/main/extra-modules.conf
      done
    organize:
      usr/lib/ubuntu-core-initramfs: ubuntu-core-initramfs
    prime:
      - -*

  initrd:
    plugin: nil
    after:
      - kernel
      - ubuntu-core-initramfs
      - firmware
    build-packages:
      # Use the native package to actually build the initrd
      - ubuntu-core-initramfs
    override-build: |
      KERNEL_VERSION=$(basename "${CRAFT_STAGE}"/modules/*)
      ubuntu-core-initramfs create-initrd \
        --root="${CRAFT_STAGE}"
        --kernelver=${KERNEL_VERSION} \
        --kerneldir=modules/${KERNEL_VERSION} \
        --skeleton=ubuntu-core-initramfs \
        --firmwaredir=firmware \
        --output="${CRAFT_PART_INSTALL}"/initrd.img
    organize:
      # Remove version suffix
      initrd.img*: initrd.img
    prime:
      - -*

  fit-image:
    after:
      - kernel
      - initrd
    plugin: nil
    source: fit-image/
    build-packages:
      - u-boot-tools
      - device-tree-compiler
    override-build: |
      mkimage \
        -f ${CRAFT_PART_SRC}/kernel_${CRAFT_TARGET_ARCH}.its \
        ${CRAFT_PART_INSTALL}/kernel.img
