---
# SPDX-License-Identifier: GPL-2.0
# Copyright (C) 2023 Isaac True

name: orange-pi-5plus-kernel
summary: A kernel for the Orange Pi 5+ for use with Ubuntu Core 22
description: |
  A kernel for the Orange Pi 5+ for use with Ubuntu Core 22

adopt-info: kernel
build-base: core22
confinement: strict
type: kernel

architectures:
  - build-on:
      - arm64
      - amd64
    build-for: arm64

package-repositories:
  # Snapcraft does not allow adding foreign architecture PPAs, so add it
  # manually
  - type: apt
    architectures: [ "${CRAFT_ARCH_BUILD_FOR}" ]
    components: [ main ]
    formats: [ deb ]
    key-server: keyserver.ubuntu.com
    key-id: 78E1918602959B9C59103100F1831DDAFC42E99D
    suites: [ jammy ]
    url: http://ppa.launchpad.net/snappy-dev/image/ubuntu/
  - type: apt
    architectures: [ "${CRAFT_ARCH_BUILD_FOR}" ]
    components: [ main ]
    formats: [ deb ]
    key-server: keyserver.ubuntu.com
    key-id: F6ECB3762474EDA9D21B7022871920D1991BC93C
    suites:
      - jammy
      - jammy-updates
      - jammy-security
    url: http://ports.ubuntu.com/ubuntu-ports

parts:
  pre-build:
    plugin: nil
    override-pull: |
      if [ "${CRAFT_ARCH_BUILD_ON}" != "${CRAFT_ARCH_BUILD_FOR}" ]; then
        # Setup host for cross-building
        mv /etc/apt/sources.list{,.old}
        echo "deb [arch=${CRAFT_ARCH_BUILD_ON}] http://archive.ubuntu.com/ubuntu jammy main restricted universe multiverse" \
          > /etc/apt/sources.list
        echo "deb [arch=${CRAFT_ARCH_BUILD_ON}] http://archive.ubuntu.com/ubuntu jammy-updates main restricted universe multiverse" \
          >> /etc/apt/sources.list
        echo "deb [arch=${CRAFT_ARCH_BUILD_ON}] http://archive.ubuntu.com/ubuntu jammy-security main restricted universe multiverse" \
          >> /etc/apt/sources.list
        dpkg --add-architecture arm64
        apt-get update
      fi

  kernel:
    after: [ pre-build ]
    plugin: nil
    source: https://git.launchpad.net/~ubuntu-kernel/ubuntu/+source/linux/+git/noble
    source-branch: master-next
    source-depth: 1
    source-type: git
    build-packages:
      - device-tree-compiler
      - make
      - bison
      - flex
      - ccache
      - libssl-dev
      - bc
      - python3
      - devscripts
      - on arm64:
        - gcc
      - else:
        - gcc-${CRAFT_ARCH_TRIPLET_BUILD_FOR}
    build-environment:
      - PATH: "/usr/lib/ccache/:${PATH}"
      - LANG: "C"
      - INSTALL_MOD_PATH: "${CRAFT_PART_INSTALL}"
      - INSTALL_DTBS_PATH: "${CRAFT_PART_INSTALL}/dtbs"
      - ARCH: "${CRAFT_ARCH_BUILD_FOR}"
      - INSTALL_MOD_STRIP: "1"
      - on arm64:
        - CROSS_COMPILE: ""
      - else:
        - CROSS_COMPILE: "${CRAFT_ARCH_TRIPLET_BUILD_FOR}-"
    override-build: |
      craftctl set version="$(head -n1 debian.master/changelog | cut -f 2 -d \( | cut -f 1 -d \))"
      craftctl set grade="stable"

      ./debian/rules clean
      ./debian/scripts/misc/annotations --export --arch "${ARCH}" > .config

      make oldconfig
      make -j $(nproc)
      make modules_install dtbs_install

      # Disable the USB host controllers as they cause the device to hang
      fdtput "${INSTALL_DTBS_PATH}"/rockchip/rk3588-orangepi-5-plus.dtb \
        -t s /usb@fc800000 status disabled
      fdtput "${INSTALL_DTBS_PATH}"/rockchip/rk3588-orangepi-5-plus.dtb \
        -t s /usb@fc840000 status disabled
      fdtput "${INSTALL_DTBS_PATH}"/rockchip/rk3588-orangepi-5-plus.dtb \
        -t s /usb@fc880000 status disabled
      fdtput "${INSTALL_DTBS_PATH}"/rockchip/rk3588-orangepi-5-plus.dtb \
        -t s /usb@fc8c0000 status disabled

      ln -svr "${CRAFT_PART_INSTALL}"/lib/modules \
        "${CRAFT_PART_INSTALL}"/modules
      gzip -c arch/"${CRAFT_ARCH_BUILD_FOR}"/boot/Image > \
        "${CRAFT_PART_INSTALL}"/Image.gz
    stage:
      - modules
      - Image.gz
      - dtbs
      - lib/modules
    prime:
      - modules
      - lib/modules

  firmware:
    after: [ pre-build ]
    plugin: nil
    source: https://github.com/orangepi-xunlong/firmware.git
    source-type: git
    source-depth: 1
    stage-packages:
      - linux-firmware:${CRAFT_ARCH_BUILD_FOR}
      - wireless-regdb:${CRAFT_ARCH_BUILD_FOR}
    override-build: |
      # Overwrite any firmware files from OPi with the ones from linux-firmware
      # Need to do this here rather than in organize because it doesn't like
      # merging paths
      mkdir -p "${CRAFT_PART_INSTALL}/firmware"
      cp -r "${CRAFT_PART_SRC}/"* "${CRAFT_PART_INSTALL}/firmware"
      cp -r "${CRAFT_PART_INSTALL}/lib/firmware/"* \
        "${CRAFT_PART_INSTALL}/firmware/"
      rm -rf "${CRAFT_PART_INSTALL}/firmware/lib"
    stage:
      - firmware
    prime:
      - firmware
      # Remove massive and unneeded firmware files
      - -firmware/mellanox
      - -firmware/amdgpu
      - -firmware/intel
      - -firmware/ath11k
      - -firmware/liquidio
      - -firmware/i915

  # We need to modify the initramfs modules, so make a copy of the "skeleton"
  # used by ubuntu-core-initramfs that we can modify
  ubuntu-core-initramfs:
    after: [ pre-build ]
    plugin: nil
    override-build: |
      apt-get download ubuntu-core-initramfs:${CRAFT_ARCH_BUILD_FOR}
      dpkg -x ubuntu-core-initramfs*.deb "${CRAFT_PART_INSTALL}/"
      # Extra initrd modules
      for mod in \
          dw_mmc-rockchip \
          sdhci-of-dwcmshc \
          gpio-rockchip \
          spi-rockchip \
          rk8xx-spi \
          rk805-pwrkey \
          rk808-regulator \
          pinctrl-rk805 \
          fixed \
          pl330 \
          phy-rockchip-naneng-combphy \
          r8169 \
        ; do
        echo "${mod}" >> \
          "${CRAFT_PART_INSTALL}"/usr/lib/ubuntu-core-initramfs/modules/main/extra-modules.conf
      done
    stage:
      - usr/lib/ubuntu-core-initramfs
    prime:
      - -*

  initrd:
    plugin: nil
    after:
      - kernel
      - ubuntu-core-initramfs
      - firmware
    build-packages:
      # Use the host package to actually build the initrd
      - ubuntu-core-initramfs
    override-build: |
      KERNEL_VERSION=$(basename "${CRAFT_STAGE}"/modules/*)
      ubuntu-core-initramfs create-initrd \
        --skeleton="${CRAFT_STAGE}"/usr/lib/ubuntu-core-initramfs \
        --kernelver="${KERNEL_VERSION}" \
        --kerneldir="${CRAFT_STAGE}"/modules/"${KERNEL_VERSION}" \
        --firmwaredir="${CRAFT_STAGE}"/firmware \
        --output="${CRAFT_PART_INSTALL}"/initrd.img
    stage:
      - initrd.img-*
    prime:
      - -*

  initrd-fixup:
    plugin: nil
    after:
      - initrd
    override-build: |
      # Replace the snap-bootstrap binary with one for the correct architecture
      if [ "${CRAFT_ARCH_BUILD_ON}" != "${CRAFT_ARCH_BUILD_FOR}" ]; then
        apt-get download snapd:${CRAFT_ARCH_BUILD_FOR}
        dpkg -x snapd*.deb "${CRAFT_PART_BUILD}"
        mkdir -p "${CRAFT_PART_BUILD}"/initrd
        pushd "${CRAFT_PART_BUILD}"/initrd
        zstd -dc < "${CRAFT_STAGE}"/initrd.img-* | cpio -id
        cp "${CRAFT_PART_BUILD}"/usr/lib/snapd/snap-bootstrap \
          usr/lib/snapd/snap-bootstrap
        find . | cpio --create --quiet --format='newc' --owner=0:0 | \
          zstd -1 -T0 > "${CRAFT_PART_INSTALL}"/initrd.img
        popd
      else
        cp "${CRAFT_STAGE}"/initrd.img-* "${CRAFT_PART_INSTALL}"/initrd.img
      fi
    stage:
      - initrd.img
    prime:
      - -*

  fit-image:
    after:
      - kernel
      - initrd-fixup
    plugin: nil
    source: fit-image/
    build-packages:
      - u-boot-tools
      - device-tree-compiler
    override-build: |
      mkimage \
        -f ${CRAFT_PART_SRC}/kernel_${CRAFT_ARCH_BUILD_FOR}.its \
        ${CRAFT_PART_INSTALL}/kernel.img

  post-build:
    after: [ fit-image ]
    plugin: nil
    override-build: |
      if [ "${CRAFT_ARCH_BUILD_ON}" != "${CRAFT_ARCH_BUILD_FOR}" ]; then
        dpkg --remove-architecture arm64
        if [ -e /etc/apt/sources.list.old ]; then
          mv /etc/apt/sources.list{.old,}
        fi
        apt-get update
      fi
