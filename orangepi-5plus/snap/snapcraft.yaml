---
# SPDX-License-Identifier: GPL-2.0
# Copyright (C) 2023 Isaac True

name: orange-pi-5plus-kernel
summary: A kernel for the Orange Pi 5+ for use with Ubuntu Core 22
description: |
  A kernel for the Orange Pi 5+ for use with Ubuntu Core 22

adopt-info: kernel
build-base: core22
confinement: strict
type: kernel

architectures:
  - build-on: arm64
    build-for: arm64

package-repositories:
  - type: apt
    ppa: snappy-dev/image
  # PPA syntax does not allow specifying a different suite; enter it manually
  - type: apt
    url: https://ppa.launchpadcontent.net/canonical-kernel-team/unstable/ubuntu
    architectures: ["${CRAFT_TARGET_ARCH}",]
    key-server: keyserver.ubuntu.com
    key-id: 110E21D8B0E2A1F0243AF6820856F197B892ACEA
    formats: [deb,]
    components: [main,]
    suites: [noble,]

parts:
  kernel:
    plugin: nil
    build-packages:
      - parallel
      - kmod
      - device-tree-compiler
    stage-packages:
      - linux-generic-wip:${CRAFT_TARGET_ARCH}
    override-build: |
      craftctl default
      craftctl set version="$(apt-cache show linux-generic-wip:${CRAFT_TARGET_ARCH} | grep '^Version:' | cut -f2 -d\ )"
      craftctl set grade="devel"

      # Make sure all modules are uncompressed
      find "${CRAFT_PART_INSTALL}/lib/modules" -name \*.ko.zst | \
        parallel zstd --rm -d {}

      # Disable the USB host controllers as they cause the device to hang
      fdtput "${CRAFT_PART_INSTALL}"/lib/firmware/*/device-tree/rockchip/rk3588-orangepi-5-plus.dtb \
        -t s /usb@fc800000 status disabled
      fdtput "${CRAFT_PART_INSTALL}"/lib/firmware/*/device-tree/rockchip/rk3588-orangepi-5-plus.dtb \
        -t s /usb@fc840000 status disabled
      fdtput "${CRAFT_PART_INSTALL}"/lib/firmware/*/device-tree/rockchip/rk3588-orangepi-5-plus.dtb \
        -t s /usb@fc880000 status disabled
      fdtput "${CRAFT_PART_INSTALL}"/lib/firmware/*/device-tree/rockchip/rk3588-orangepi-5-plus.dtb \
        -t s /usb@fc8c0000 status disabled

      depmod -a -b "${CRAFT_PART_INSTALL}" "$(basename ${CRAFT_PART_INSTALL}/lib/modules/*)"
    organize:
      "boot/vmlinuz-*": Image
      "lib/modules": modules
      "lib/firmware/*/device-tree": dtbs
    stage:
      - modules
      - Image
      - dtbs
    prime:
      - modules

  firmware:
    plugin: nil
    source: https://github.com/orangepi-xunlong/firmware.git
    source-type: git
    source-depth: 1
    stage-packages:
      - linux-firmware:${CRAFT_TARGET_ARCH}
      - wireless-regdb:${CRAFT_TARGET_ARCH}
    override-build: |
      craftctl default
      # Overwrite any firmware files from OPi with the ones from linux-firmware
      # Need to do this here rather than in organize because it doesn't like
      # merging paths
      mkdir -p "${CRAFT_PART_INSTALL}/firmware"
      cp -r "${CRAFT_PART_SRC}/"* "${CRAFT_PART_INSTALL}/firmware"
      cp -r "${CRAFT_PART_INSTALL}/lib/firmware/"* \
        "${CRAFT_PART_INSTALL}/firmware/"
      rm -rf "${CRAFT_PART_INSTALL}/firmware/lib"
    stage:
      - firmware
    prime:
      - firmware

  # We need to modify the initramfs modules, so make a copy of the "skeleton"
  # used by ubuntu-core-initramfs that we can modify
  ubuntu-core-initramfs:
    plugin: nil
    stage-packages:
      - ubuntu-core-initramfs:${CRAFT_TARGET_ARCH}
    override-build: |
      craftctl default
      # Extra initrd modules
      for mod in \
          dw_mmc-rockchip \
          sdhci-of-dwcmshc \
          gpio-rockchip \
          spi-rockchip \
          rk8xx-spi \
          rk805-pwrkey \
          rk808-regulator \
          pinctrl-rk805 \
          fixed \
          pl330 \
          phy-rockchip-naneng-combphy \
          r8169 \
        ; do
        echo "${mod}" >> \
          "${CRAFT_PART_INSTALL}"/usr/lib/ubuntu-core-initramfs/modules/main/extra-modules.conf
      done
    stage:
      - usr/lib/ubuntu-core-initramfs
    prime:
      - -*

  initrd:
    plugin: nil
    after:
      - kernel
      - ubuntu-core-initramfs
      - firmware
    build-packages:
      # Use the host package to actually build the initrd
      - ubuntu-core-initramfs
    override-build: |
      KERNEL_VERSION=$(basename "${CRAFT_STAGE}"/modules/*)
      ubuntu-core-initramfs create-initrd \
        --skeleton="${CRAFT_STAGE}"/usr/lib/ubuntu-core-initramfs \
        --kernelver="${KERNEL_VERSION}" \
        --kerneldir="${CRAFT_STAGE}"/modules/"${KERNEL_VERSION}" \
        --firmwaredir="${CRAFT_STAGE}"/firmware \
        --output="${CRAFT_PART_INSTALL}"/initrd.img
      # Remove version suffix
      mv "${CRAFT_PART_INSTALL}"/initrd.img-* "${CRAFT_PART_INSTALL}"/initrd.img
    prime:
      - -*

  fit-image:
    after:
      - kernel
      - initrd
    plugin: nil
    source: fit-image/
    build-packages:
      - u-boot-tools
      - device-tree-compiler
    override-build: |
      mkimage \
        -f ${CRAFT_PART_SRC}/kernel_${CRAFT_TARGET_ARCH}.its \
        ${CRAFT_PART_INSTALL}/kernel.img
